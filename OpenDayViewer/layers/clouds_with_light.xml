<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Layer layerType="TiledImageLayer" version="1">
	<DisplayName>clouds</DisplayName>
	<Legend></Legend>
	<Service serviceName="DelegatorTileService">
	</Service>
	<Delegates>
		<Delegate>LocalRequester</Delegate>
		<Delegate>IgnoreElevation</Delegate>
		<Delegate>ElevationOffset(10000)</Delegate>
		<Delegate>DepthMask</Delegate>
		<Delegate>AltitudeFade(200000,20000)</Delegate>
		<Delegate>Blending(SrcAlpha,One,1.0,1.0,1.0,alpha)</Delegate>
		<Delegate>Shader</Delegate>
    </Delegates>
	<LastUpdate>1326063312400</LastUpdate>
    <DatasetName>clouds</DatasetName>
    <DataCacheName>clouds</DataCacheName>
	<ImageFormat>image/png</ImageFormat>
	<AvailableImageFormats>
        <ImageFormat>image/png</ImageFormat>
    </AvailableImageFormats>
    <FormatSuffix>.png</FormatSuffix>
    <NumLevels count="5" numEmpty="0"/>
    <Sector>
        <SouthWest>
            <LatLon latitude="-90" longitude="-180" units="degrees"/>
        </SouthWest>
        <NorthEast>
            <LatLon latitude="90" longitude="180" units="degrees"/>
        </NorthEast>
    </Sector>
    <TileOrigin>
        <LatLon latitude="-90.0" longitude="-180.0" units="degrees"/>
    </TileOrigin>
    <TileSize>
        <Dimension height="512" width="512"/>
    </TileSize>
    <LevelZeroTileDelta>
        <LatLon latitude="60.0" longitude="60.0" units="degrees"/>
    </LevelZeroTileDelta>
    <TextureFormat>image/dds</TextureFormat>
    <ForceLevelZeroLoads>false</ForceLevelZeroLoads>
    <RetainLevelZeroTiles>true</RetainLevelZeroTiles>
    <UseMipMaps>true</UseMipMaps>
    <UseTransparentTextures>true</UseTransparentTextures>
	<Shaders>
		<VertexShader>
<![CDATA[
uniform vec3 lightDirection;
uniform mat4 modelViewMatrixInverse;

varying float opacity;

void main(void)
{
	//calculate reference center using the old (untranslated) modelview matrix
	vec3 refCenter = (modelViewMatrixInverse * gl_ModelViewMatrix)[3].xyz;
	vec3 v3Pos = gl_Vertex.xyz + refCenter;
	
	float fLightAngle = dot(lightDirection, v3Pos) / length(v3Pos);
	opacity = clamp(fLightAngle * 5.0, 0.2, 1.0) * gl_Color.a;
	
	gl_Position = ftransform();
	gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
	gl_TexCoord[1] = gl_TextureMatrix[0] * gl_MultiTexCoord1;
}
]]>
		</VertexShader>
		<FragmentShader>
<![CDATA[
uniform sampler2D tex0;
uniform sampler2D tex1;

varying float opacity;

void main (void)
{
	vec4 alpha = texture2D(tex1, gl_TexCoord[1].st);
	if(alpha.a < 1.0) discard;
	
	vec4 tile = texture2D(tex0, gl_TexCoord[0].st);
	gl_FragColor = vec4(tile.rgb, opacity);
}
]]>
		</FragmentShader>
	</Shaders>
</Layer>
